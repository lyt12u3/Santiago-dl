import re
from datetime import timedelta
from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards import settings_buttons, choose_group_buttons, cancel_buttons, menu_buttons, links_buttons, \
    subjects_buttons, links_types, links_types_delete, notify_buttons, display_buttons, group_users, recieve_interface
from loader import dp, db, groups_list, groups, week_lectures, notify_lectures, subjects, links, bot, notify, display, display_new
from states import Settings
from utils.utilities import debug, datetime_now, formatDate, get_links, escapeMarkdown, datePrint
from utils import parser

@dp.message_handler(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def settings_back(message: types.Message):
    day, month, year = formatDate(datetime_now())
    await message.answer(f'üìÜ –î–∞—Ç–∞: {day}.{month}.{year}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=menu_buttons(message.from_user.id))

@dp.message_handler(text="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
async def notify_test(message: types.Message):
    user_id = message.from_user.id
    group = db.get_group(user_id)
    await message.answer("üîî –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É üòÄ", parse_mode="MarkdownV2", disable_web_page_preview=True, reply_markup=notify_buttons(user_id, group))

@dp.callback_query_handler(lambda call: call.data == "change_all")
async def callback_change(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    group = db.get_group(user_id)
    notify.update_all_notity(user_id, group, not notify.has_positive_notify(user_id, group))
    await callback.message.edit_text("üîî –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É üòÄ", parse_mode="MarkdownV2", reply_markup=notify_buttons(user_id, group))

@dp.callback_query_handler(lambda call: re.match(r'change_.+', call.data))
async def callback_change(callback: types.CallbackQuery):
    subject = callback.data[7:]
    user_id = callback.from_user.id
    group = db.get_group(user_id)
    notify.update_notify(user_id, group, subject, not notify.get_notify(user_id, group, subject))
    await callback.message.edit_text("üîî –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É üòÄ", parse_mode="MarkdownV2", reply_markup=notify_buttons(user_id, group))

@dp.message_handler(text="–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
async def display_setting(message: types.Message):
    user_id = message.from_user.id
    group = db.get_group(user_id)
    await message.answer("üîî –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ üòÄ", parse_mode="MarkdownV2", disable_web_page_preview=True, reply_markup=display_buttons(user_id, group))

@dp.callback_query_handler(lambda call: re.match(r'display_change_.+', call.data))
async def callback_change(callback: types.CallbackQuery):
    subject = callback.data.replace("display_change_","")
    user_id = callback.from_user.id
    group = db.get_group(user_id)
    display_new.update_display(user_id, group, subject)
    await callback.message.edit_text("üîî –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ üòÄ", parse_mode="MarkdownV2", reply_markup=display_buttons(user_id, group))

# @dp.message_handler(text="–í–∏–º–∫–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
# async def notify_off(message: types.Message):
#     user_id = message.from_user.id
#     db.update_notify_status(user_id, False)
#     await message.answer('–¢–µ–ø–µ—Ä –≤–∏ –Ω–µ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üîï', reply_markup=settings_buttons(user_id))
#     debug(f"notify off by {user_id}")
#
# @dp.message_handler(text="–£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
# async def notify_on(message: types.Message):
#     user_id = message.from_user.id
#     db.update_notify_status(user_id, True)
#     await message.answer('–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üîî', reply_markup=settings_buttons(user_id))
#     debug(f"notify on by {user_id}")

@dp.message_handler(text="–ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É")
async def group_change(message: types.Message):
    await message.answer(f"üéì –í–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ –≥—Ä—É–ø–∞: {db.get_group(message.from_user.id)}\n\n–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —ó—ó, –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö", reply_markup=choose_group_buttons())
    # await MenuState.SettingsMenu_GroupChange.set()

@dp.callback_query_handler(text="no_group")
async def add_group_start(callback: types.CallbackQuery):
    await Settings.GroupAdd.set()
    await callback.message.answer("üéì –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É\n\n–ü—Ä–∏–∫–ª–∞–¥: *–ö–ù–¢-22-4*\n–ê–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å *–°–∫–∞—Å—É–≤–∞—Ç–∏*", parse_mode="Markdown", reply_markup=cancel_buttons)

@dp.message_handler(text="–°–∫–∞—Å—É–≤–∞—Ç–∏", state=Settings.GroupAdd)
async def process_add_group_invalid(message: types.Message, state: FSMContext):
    await message.answer(f'‚öôÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=settings_buttons(message.from_user.id))
    await state.finish()

@dp.message_handler(lambda message: message.text not in groups_list.get_groups_names(), state=Settings.GroupAdd)
async def process_add_group_invalid(message: types.Message, state: FSMContext):
    print(groups_list.get_groups_names())
    return await message.reply("–û–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è ü´§\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ—Ä–Ω—É –Ω–∞–∑–≤—É –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å *–°–∫–∞—Å—É–≤–∞—Ç–∏*", reply_markup=cancel_buttons)

@dp.message_handler(state=Settings.GroupAdd)
async def process_add_group(message: types.Message, state: FSMContext):
    code = groups_list.get_code(message.text)
    groups.add_group(message.text, code)
    db.update_nure_group(message.from_user.id, message.text)

    current_time = datetime_now()
    day, month, year = formatDate(current_time)
    weekday = current_time.weekday()
    start = current_time - timedelta(days=weekday)
    end = current_time + timedelta(days=6 - weekday)
    week_lectures[message.text] = parser.parseWeek(start.day, start.month, start.year, end.day, end.month, end.year, message.text)
    notify_lectures[message.text] = week_lectures[message.text][f"{day}.{month}.{year}"][1:]

    await message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä—É–ø—É *{message.text}* —Ç–∞ –¥–æ–¥–∞–ª–∏ —ó—ó –¥–æ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä—É–ø, —Ç–æ–∂ —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ç–µ–∂ –º–æ–∂—É—Ç—å —ó—ó –æ–±—Ä–∞—Ç–∏ ü•∞\n\n‚öôÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=settings_buttons(message.from_user.id), parse_mode="Markdown")
    await state.finish()
    debug(f"group {message.text} added by {message.from_user.id} on change")

@dp.callback_query_handler(text_contains="group:")
async def process_change_group(callback: types.CallbackQuery, state: FSMContext):
    group = callback.data.replace("group:", "")
    if group in groups.get_groups_names():
        db.update_nure_group(callback.from_user.id, group)
        await callback.message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä—É–ø—É *{group}* ü•∞\n\n‚öôÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=settings_buttons(callback.from_user.id), parse_mode="Markdown")
        await state.finish()
        debug(f"group {callback.data} selected by {callback.from_user.id} on change")
    else:
        return await callback.message.answer("–û–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è ü´§\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö")

@dp.message_handler(text="–ü–æ—Å–∏–ª–∞–Ω–Ω—è")
async def link_settings(message: types.Message):
    user_id = message.from_user.id
    current_links = get_links(user_id)
    await message.answer(current_links, parse_mode="MarkdownV2", disable_web_page_preview=True, reply_markup=links_buttons)
    debug(f"link list used by {user_id}")

@dp.callback_query_handler(lambda call: call.data in ['add_link', 'delete_link'])
async def callback_add_link1(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    current_links = get_links(user_id)
    await callback.message.edit_text(current_links, parse_mode="MarkdownV2", disable_web_page_preview=True, reply_markup=subjects_buttons(callback))

@dp.callback_query_handler(text="link_cancel")
async def callback_link_settings_cancel(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    current_links = get_links(user_id)
    await callback.message.edit_text(current_links, parse_mode="MarkdownV2", reply_markup=links_buttons, disable_web_page_preview=True)

@dp.callback_query_handler(lambda call: re.match(r'delete_.+', call.data))
async def callback_type(callback: types.CallbackQuery):
    subject = callback.data[7:]
    # await bot.send_message(callback.from_user.id, f'üìö –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è {subject}', reply_markup=links_types_delete)
    await callback.message.edit_text(f'üìö –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è {subject}', reply_markup=links_types_delete)
    subj_del_data[callback.from_user.id] = {}
    subj_del_data[callback.from_user.id]["Subject"] = subject

@dp.callback_query_handler(lambda call: call.data in ['lk_del','pz_del','lb_del','all_del'])
async def callback_links(callback: types.CallbackQuery):
    type_raw = callback.data.replace("_del", "")
    if type_raw == "lk":
        type = "–õ–∫"
    elif type_raw == "pz":
        type = "–ü–∑"
    elif type_raw == "lb":
        type = "–õ–±"
    elif type_raw == "all":
        type = "All"
    subj_del_data_local = subj_del_data.get(callback.from_user.id)
    subject = subj_del_data_local.get("Subject")
    group = db.get_group(callback.from_user.id)
    if subjects.subjects_exist(group):
        current_links_arr_line = subjects.get_subjects(group)
        current_links_arr = current_links_arr_line.split(',')
    else:
        current_links_arr = parser.parseSubjects(group)
        subjects.set_subjects(group, current_links_arr)
    if subject in current_links_arr:
        if type == "All":
            links.delete_link(callback.from_user.id, group, subject, "–õ–∫")
            links.delete_link(callback.from_user.id, group, subject, "–ü–∑")
            links.delete_link(callback.from_user.id, group, subject, "–õ–±")
        else:
            links.delete_link(callback.from_user.id, group, subject, type)
        await callback.message.answer("–ü–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ", reply_markup=settings_buttons(callback.from_user.id))
        current_links = get_links(callback.from_user.id)
        await callback.message.answer(current_links, parse_mode="MarkdownV2", disable_web_page_preview=True, reply_markup=links_buttons)
        debug(f"link of {subject} {type} deleted by {callback.from_user.id} from {group}")

subj_data = {}
subj_del_data = {}

@dp.callback_query_handler(lambda call: re.match(r'add_.+', call.data))
async def callback_type(callback: types.CallbackQuery):
    subject = callback.data[4:]
    # await bot.send_message(callback.from_user.id, f'üìö –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è {subject}', reply_markup=links_types)
    await callback.message.edit_text(f'üìö –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è {subject}',reply_markup=links_types)
    subj_data[callback.from_user.id] = {}
    subj_data[callback.from_user.id]["Subject"] = subject

@dp.callback_query_handler(lambda call: call.data in ['lk_add','pz_add','lb_add','all_add'])
async def callback_links(callback: types.CallbackQuery):
    type_raw = callback.data.replace("_add", "")
    if type_raw == "lk":
        type = "–õ–∫"
    elif type_raw == "pz":
        type = "–ü–∑"
    elif type_raw == "lb":
        type = "–õ–±"
    elif type_raw == "all":
        type = "All"
    subj_data_local = subj_data.get(callback.from_user.id)
    subject = subj_data_local.get("Subject")
    subj_data[callback.from_user.id]["Type"] = type
    group = db.get_group(callback.from_user.id)
    if subjects.subjects_exist(group):
        current_links_arr_line = subjects.get_subjects(group)
        current_links_arr = current_links_arr_line.split(',')
    else:
        current_links_arr = parser.parseSubjects(group)
        subjects.set_subjects(group, current_links_arr)
    if subject in current_links_arr:
        if type == "All":
            line = escapeMarkdown(f"–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è {subject}\n\n–ü—Ä–∏–∫–ª–∞–¥: https://meet.google.com/yjg-qgwj-bwh")
        else:
            line = escapeMarkdown(f"–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è {subject} {type}\n\n–ü—Ä–∏–∫–ª–∞–¥: https://meet.google.com/yjg-qgwj-bwh")
        await bot.send_message(callback.from_user.id, f"{line}\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –Ω–∞–ø–∏—à—ñ—Ç—å *–°–∫–∞—Å—É–≤–∞—Ç–∏*", parse_mode="MarkdownV2", disable_web_page_preview=True, reply_markup=cancel_buttons)
        await Settings.LinkAdd.set()

@dp.message_handler(lambda message: message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏", state=Settings.LinkAdd)
async def links_settings_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–í–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n\n‚öôÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=settings_buttons(message.from_user.id))

@dp.message_handler(state=Settings.LinkAdd)
async def links_settings_link_wait(message: types.Message, state: FSMContext):
    # if "meet.google.com" in message.text:
    #     code = re.search(r"com/(.+)", message.text).group(1)
    # else:
    #     code = message.text
    link = message.text
    user_id = message.from_user.id
    group = db.get_group(user_id)
    subj_data_local = subj_data.get(user_id)
    subject = subj_data_local.get("Subject")
    type = subj_data_local.get("Type")
    if type == "All":
        for new_type in ["–õ–∫","–ü–∑","–õ–±"]:
            if (not links.link_exist(user_id, group, subject, new_type)):
                links.add_link(user_id, group, subject, new_type, link)
            else:
                links.update_link(user_id, group, subject, new_type, link)
        await message.answer(f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è {subject} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ!", reply_markup=settings_buttons(user_id))
    else:
        if (not links.link_exist(user_id, group, subject, type)):
            links.add_link(user_id, group, subject, type, link)
        else:
            links.update_link(user_id, group, subject, type, link)
        await message.answer(f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è {subject} {type} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–µ!", reply_markup=settings_buttons(user_id))
    current_links = get_links(user_id)
    await message.answer(current_links, parse_mode="MarkdownV2", disable_web_page_preview=True, reply_markup=links_buttons)
    await state.finish()
    debug(f"link of {subject} added by {user_id} from {group}")

@dp.message_handler(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏")
async def notify_test(message: types.Message):
    user_id = message.from_user.id
    group = db.get_group(user_id)

    if subjects.subjects_exist(group):
        current_subj_arr_line = subjects.get_subjects(group)
        current_subj_arr = current_subj_arr_line.split(',')
    else:
        current_subj_arr = parser.parseSubjects(group)
        subjects.set_subjects(group, current_subj_arr)
    links_exist = False
    for subj in current_subj_arr:
        if links_exist:
            break
        for type in ["–õ–∫", "–ü–∑", "–õ–±", "–ö–æ–Ω—Å"]:
            if links.link_exist(user_id, group, subj, type):
                links_exist = True
                break

    if links_exist:
        markup = await group_users(group)
        await message.answer("‚öôÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑ —è–∫–∏–º –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏\n\n–í–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –≤–∞—à–æ—ó –≥—Ä—É–ø–∏, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω–æ–≥–æ –∑ –Ω–∏—Ö", parse_mode="MarkdownV2", disable_web_page_preview=True, reply_markup=markup)
    else:
        await message.answer("–ù–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω—å, —è–∫–∏–º–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å ‚ö†Ô∏è")

@dp.callback_query_handler(lambda call: re.match(r'userid_.+', call.data))
async def callback_userid(callback: types.CallbackQuery):
    user_recieve_id = callback.data.replace("userid_", "")
    user_id = callback.from_user.id
    group = db.get_group(user_id)
    try:
        user_recieve = await bot.get_chat(user_recieve_id)
        user_recieve_username = '@' + user_recieve.username
        sender_username = '@' + escapeMarkdown(callback.from_user.username)
        sender_links = get_links(user_id, False)
        markup = recieve_interface(user_id)
        if len(sender_links) > 1:
            sender_links = f"{sender_links}\n"
        await bot.send_message(user_recieve_id,f"üîó –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {sender_username} —Ö–æ—á–µ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∑ –≤–∞–º–∏ —Å–≤–æ—ó–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ –ø–∞—Ä–∏\n\n{sender_links}*–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É*, –ø—ñ—Å–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è –≤–∫–∞–∑–∞–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –±—É–¥—É—Ç—å –∑–∞–º—ñ–Ω–µ–Ω—ñ —Ç–∞ –Ω–µ –∑–º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω—ñ –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É",parse_mode="MarkdownV2", disable_web_page_preview=True, reply_markup=markup)
        await callback.message.edit_text(f"–í–∏ –ø–æ–¥—ñ–ª–∏–ª–∏—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_recieve_username} ‚úÖ")
    except Exception as e:
        print(e.args[0])

@dp.callback_query_handler(lambda call: re.match(r'accept_senderid_.+', call.data))
async def callback_userid(callback: types.CallbackQuery):
    sender_id = callback.data.replace("accept_senderid_", "")
    user_id = callback.from_user.id
    group = db.get_group(sender_id)
    datePrint(f"links accepted by {user_id}. Sender {sender_id}")
    if subjects.subjects_exist(group):
        current_subj_arr_line = subjects.get_subjects(group)
        current_subj_arr = current_subj_arr_line.split(',')
    else:
        current_subj_arr = parser.parseSubjects(group)
        subjects.set_subjects(group, current_subj_arr)

    for subj in current_subj_arr:
        for type in ["–õ–∫", "–ü–∑", "–õ–±", "–ö–æ–Ω—Å"]:
            if links.link_exist(sender_id, group, subj, type):
                sender_link = links.get_link(sender_id, group, subj, type)
                if links.link_exist(user_id, group, subj, type):
                    links.update_link(user_id, group, subj, type, sender_link)
                else:
                    links.add_link(user_id, group, subj, type, sender_link)
                datePrint(f"Subject {subj} {type} updated")

    message = callback.message
    await message.edit_text("–ü–æ—Å–∏–ª–∞–Ω–Ω—è –±—É–ª–∏ –∑–∞–º—ñ–Ω–µ–Ω—ñ ‚úÖ")

@dp.callback_query_handler(lambda call: re.match(r'decline_senderid_.+', call.data))
async def callback_userid(callback: types.CallbackQuery):
    sender_id = callback.data.replace("decline_senderid_", "")
    datePrint(f"links declined by {callback.from_user.id}. Sender {sender_id}")
    await bot.delete_message(callback.from_user.id, callback.message.message_id)