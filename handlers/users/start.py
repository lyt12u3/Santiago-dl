from datetime import datetime, timedelta
from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards import choose_group_buttons, menu_buttons, cancel_buttons
from loader import dp, db, groups, groups_list, week_lectures, notify_lectures, bot
from states import UserWait
from utils import parser
from utils.utilities import formatDate, datetime_now, debug

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if (not db.user_exists(message.from_user.id)):
        debug(f"/start used by non-registered user {message.from_user.id}")
        print(message.from_user.id)
        await UserWait.nure_group.set()
        await message.answer('–ü—Ä–∏–≤—ñ—Ç üëã\n–î–ª—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ —Å–≤–æ—é –≥—Ä—É–ø—É', reply_markup=choose_group_buttons())
    else:
        debug(f"/start used by registered user {message.from_user.id}")
        day, month, year = formatDate(datetime_now())
        await message.answer(f'üìÜ –î–∞—Ç–∞: {day}.{month}.{year}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=menu_buttons(message.from_user.id))

@dp.callback_query_handler(text="no_group", state=UserWait.nure_group)
async def add_group_start(callback: types.CallbackQuery):
    await UserWait.add_group.set()
    await callback.message.answer("üéì –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É\n\n–ü—Ä–∏–∫–ª–∞–¥: *–ö–ù–¢-22-4*\n–ê–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å *–°–∫–∞—Å—É–≤–∞—Ç–∏*", parse_mode="Markdown", reply_markup=cancel_buttons)

@dp.message_handler(text="–°–∫–∞—Å—É–≤–∞—Ç–∏", state=UserWait.add_group)
async def process_add_group_invalid(message: types.Message):
    await message.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
    await message.answer('–î–ª—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ —Å–≤–æ—é –≥—Ä—É–ø—É', reply_markup=choose_group_buttons())
    await UserWait.nure_group.set()

@dp.message_handler(lambda message: message.text in groups_list.get_groups()[0], state=UserWait.add_group)
async def process_add_group_invalid(message: types.Message):
    return await message.reply("–û–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è ü´§\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ—Ä–Ω—É –Ω–∞–∑–≤—É –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å *–°–∫–∞—Å—É–≤–∞—Ç–∏*", reply_markup=cancel_buttons)

@dp.message_handler(state=UserWait.add_group)
async def process_add_group(message: types.Message, state: FSMContext):
    code = groups_list.get_code(message.text)
    groups.add_group(message.text, code)
    db.add_user(message.from_user.id, message.text, True)
    all_users = len(db.read_all())

    current_time = datetime_now()
    day, month, year = formatDate(current_time)
    weekday = current_time.weekday()
    start = current_time - timedelta(days=weekday)
    end = current_time + timedelta(days=6 - weekday)
    week_lectures[message.text] = parser.parseWeek(start.day, start.month, start.year, end.day, end.month, end.year, message.text)
    notify_lectures[message.text] = week_lectures[message.text][f"{day}.{month}.{year}"][1:]

    await message.answer(f"–î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ ‚úÖ\n\n–í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä—É–ø—É *{message.text}* —Ç–∞ –¥–æ–¥–∞–ª–∏ —ó—ó –¥–æ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä—É–ø, —Ç–æ–∂ —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ç–µ–∂ –º–æ–∂—É—Ç—å —ó—ó –æ–±—Ä–∞—Ç–∏ ü•∞\n\nüéì –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–∏–≤–∏—Ç–∏—Å—å —Ä–æ–∑–∫–ª–∞–¥ —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –ø–∞—Ä–∏!", parse_mode="Markdown")
    await message.answer(f'üìÜ –î–∞—Ç–∞: {day}.{month}.{year}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=menu_buttons(message.from_user.id))
    await state.finish()
    debug(f"group {message.text} added by {message.from_user.id} on register")
    await bot.send_message(728227124, f"üìà –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {message.from_user.full_name} [{message.from_user.id}]\nüéì –ì—Ä—É–ø–∞: {message.text}\n\nüë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {all_users}")

@dp.callback_query_handler(text_contains="group:", state=UserWait.nure_group)
async def process_nure_group(callback: types.CallbackQuery, state: FSMContext):
    group = callback.data.replace("group:", "")
    if group in groups.get_groups_names():
        db.add_user(callback.from_user.id, group, True)
        all_users = len(db.read_all())

        await callback.message.answer('–î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ ‚úÖ\n\nüéì –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–∏–≤–∏—Ç–∏—Å—å —Ä–æ–∑–∫–ª–∞–¥ —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –ø–∞—Ä–∏!', parse_mode="Markdown")
        day, month, year = formatDate(datetime_now())
        await callback.message.answer(f'üìÜ –î–∞—Ç–∞: {day}.{month}.{year}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=menu_buttons(callback.from_user.id))
        await state.finish()
        debug(f"group {group} selected by {callback.from_user.id} on register")
        await bot.send_message(728227124, f"üìà –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {callback.from_user.full_name} [{callback.from_user.id}]\nüéì –ì—Ä—É–ø–∞: {group}\n\nüë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {all_users}")
    else:
        return await callback.message.answer("–û–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è ü´§\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö")