import re
from datetime import timedelta

from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards import admin_settings_buttons, menu_buttons, delete_group_buttons, users_list_buttons, editor_types_markup, editor_choose_markup, reply_editor_subjects, editor_automate, editor_finish
from loader import dp, db, groups, bot, week_lectures, notify_lectures
from states import AdminSettings
from utils import parser, Lecture
from utils.updater import update_lectures_process
from utils.utilities import formatDate, datetime_now, escapeMarkdown, formatWeekday, formatChar


@dp.message_handler(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', state=AdminSettings.SettingsMenu)
async def back(message: types.Message, state: FSMContext):
    await state.finish()
    day, month, year = formatDate(datetime_now())
    await message.answer(f'üìÜ –î–∞—Ç–∞: {day}.{month}.{year}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=menu_buttons(message.from_user.id))

@dp.message_handler(text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ', state=AdminSettings.SettingsMenu)
async def update_lectures(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä üîÑÔ∏è', reply_markup=admin_settings_buttons)
    await update_lectures_process()
    await message.answer('–ü–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ', reply_markup=admin_settings_buttons)

@dp.message_handler(text='–û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –≤—Å–µ—Ö –≥—Ä—É–ø–ø', state=AdminSettings.SettingsMenu)
async def update_lectures(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø üîÑÔ∏è', reply_markup=admin_settings_buttons)
    parser.parseGroup()
    await message.answer('–ì—Ä—É–ø–ø—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ', reply_markup=admin_settings_buttons)

@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É', state=AdminSettings.SettingsMenu)
async def delete_group_from_db(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', reply_markup=delete_group_buttons())
    await AdminSettings.DeleteGroup.set()

@dp.callback_query_handler(text="delete_group_cancel", state=AdminSettings.DeleteGroup)
async def process_delete_group_cancel(callback: types.CallbackQuery):
    await AdminSettings.SettingsMenu.set()
    return await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
@dp.callback_query_handler(lambda call: call.data not in groups.get_groups_names(), state=AdminSettings.DeleteGroup)
async def process_delete_group_invalid(callback: types.CallbackQuery):
    return await callback.message.answer("–û–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è ü´§\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö")
@dp.callback_query_handler(state=AdminSettings.DeleteGroup)
async def process_delete_group(callback: types.CallbackQuery):
     group = callback.data
     groups.delete_group(group)
     await callback.message.answer(f"–í—ã —É–¥–∞–ª–∏–ª–∏ –≥—Ä—É–ø–ø—É *{group}*", parse_mode="Markdown")
     await AdminSettings.SettingsMenu.set()

@dp.message_handler(text='–í—ã–≤–µ—Å—Ç–∏ –ë–î', state=AdminSettings.SettingsMenu)
async def show_db(message: types.Message):
    result = db.read_all()
    strokes = ''
    if len(result) > 0:
        for el in result:
            notify_status = '‚ùå'
            if el[3] == 1:
                notify_status = '‚úÖ'
            username = ''
            try:
                user = await bot.get_chat(el[1])
                username = '@' + user.username
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –æ—Ç {el[1]}: {e}")
            strokes += f'{el[1]} {el[2]} {notify_status} {username}\n'
        await message.answer(f'–î–∞–Ω–Ω—ã–µ –ë–î:\n\n{strokes}\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(result)}')
    else:
        await message.answer('–í –ë–î –ø—É—Å—Ç–æ ü´§')

@dp.message_handler(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', state=AdminSettings.SettingsMenu)
async def change_notify_status(message: types.Message):
    result = db.read_all()
    if len(result) > 0:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users_list_buttons(result))
        await AdminSettings.ChangeNotify.set()
    else:
        await message.answer('–í –ë–î –ø—É—Å—Ç–æ ü´§')

@dp.message_handler(lambda message: not re.match(r'(\d+).*', message.text), state=AdminSettings.ChangeNotify)
async def change_notify_status_user_invalid(message: types.Message):
    await message.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

@dp.message_handler(state=AdminSettings.ChangeNotify)
async def change_notify_status_user(message: types.Message):
    await AdminSettings.SettingsMenu.set()
    user_id = re.search(r'(\d+).*', message.text).group(1)
    result = db.get_notify_status(user_id)
    if result == 1:
        db.update_notify_status(user_id, False)
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –û—Ç–∫–ª—é—á–µ–Ω–æ ‚ùå', reply_markup=admin_settings_buttons)
    else:
        db.update_notify_status(user_id, True)
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –í–∫–ª—é—á–µ–Ω–æ ‚úÖ', reply_markup=admin_settings_buttons)

@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', state=AdminSettings.SettingsMenu)
async def change_notify_status(message: types.Message):
    result = db.read_all()
    if len(result) > 0:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users_list_buttons(result))
        await AdminSettings.DeleteUser.set()
    else:
        await message.answer('–í –ë–î –ø—É—Å—Ç–æ ü´§')

@dp.message_handler(lambda message: not re.match(r'(\d+).*', message.text), state=AdminSettings.DeleteUser)
async def process_delete_user_invalid(message: types.Message):
    await message.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

@dp.message_handler(state=AdminSettings.DeleteUser)
async def process_delete_user(message: types.Message):
    await AdminSettings.SettingsMenu.set()
    user_id = re.search(r'(\d+).*', message.text).group(1)
    if (not db.user_exists(user_id)):
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ", reply_markup=admin_settings_buttons)
        return
    db.delete_user(user_id)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —É–¥–∞–ª–µ–Ω", reply_markup=admin_settings_buttons)

@dp.message_handler(text='–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', state=AdminSettings.SettingsMenu)
async def change_user_group(message: types.Message):
    await message.answer('–ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')

@dp.message_handler(text='–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É', state=AdminSettings.SettingsMenu)
async def create_lecture_base(message: types.Message):
    user_id = message.from_user.id
    group = db.get_group(user_id)
    await message.answer('‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞', reply_markup=reply_editor_subjects(user_id, group))
    await AdminSettings.CreateLecture_Name.set()

@dp.message_handler(state=AdminSettings.CreateLecture_Name)
async def create_lecture_name(message: types.Message, state: FSMContext):
    subj_name = message.text
    data = await state.get_data()
    lecture_info = data.get('arr')
    if not lecture_info:
        lecture_info = []
        await state.update_data(arr=lecture_info)
    await state.update_data(subj_name=subj_name)
    await message.answer(f'‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã\n\nüìö –ù–∞–∑–≤–∞–Ω–∏–µ: {subj_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ä—ã', reply_markup=editor_types_markup)
    await AdminSettings.CreateLecture_Type.set()

@dp.message_handler(state=AdminSettings.CreateLecture_Type)
async def create_lecture_type(message: types.Message, state: FSMContext):
    info = await state.get_data()
    subj_type = message.text
    subj_name = info.get('subj_name')
    lecture_info = info.get('arr')
    lecture_info.append([subj_name, subj_type])
    print(f'{lecture_info}')
    await state.update_data(arr=lecture_info)

    arr_information = []
    for description in lecture_info:
        arr_information.append(f'{description[0]} {description[1]}')
    line = ', '.join(arr_information)

    await message.answer(f'‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã\n\nüìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {line}\n\n–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', reply_markup=editor_choose_markup)
    await AdminSettings.CreateLecture_AddOrContinue.set()

@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å', state=AdminSettings.CreateLecture_AddOrContinue)
async def create_lecture_add(message: types.Message):
    user_id = message.from_user.id
    group = db.get_group(user_id)
    await message.answer('‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞', reply_markup=reply_editor_subjects(user_id, group))
    await AdminSettings.CreateLecture_Name.set()

@dp.message_handler(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', state=AdminSettings.CreateLecture_AddOrContinue)
async def create_lecture_time(message: types.Message):
    await message.answer('‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ \(–ü–∞—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 6 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\)\n\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: *11:15*\n\n–í–Ω–∏–º–∞–Ω–∏–µ ‚ö†Ô∏è –ü–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞\!', parse_mode="MarkdownV2", reply_markup=editor_automate)
    await AdminSettings.CreateLecture_Time.set()

@dp.message_handler(text='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',state=AdminSettings.CreateLecture_Time)
async def create_lecture_automate(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    group = db.get_group(user_id)

    current_time = datetime_now() + timedelta(minutes=6)
    minute = formatChar(current_time.time().minute)
    hour = formatChar(current_time.time().hour)
    day, month, year = formatDate(current_time)
    date = f"{day}.{month}.{year}"

    info = await state.get_data()
    lecture_info = info.get('arr')

    arr_information = []
    for description in lecture_info:
        arr_information.append(f'{description[0]} {description[1]}')
    line = ', '.join(arr_information)

    weekday_number = current_time.weekday()
    start = current_time - timedelta(days=weekday_number)
    end = current_time + timedelta(days=6 - weekday_number)
    weekday = formatWeekday(current_time.weekday())
    parsed_week = {}
    keys = list(week_lectures.keys())
    if group in keys:
        day_keys = list(week_lectures[group].keys())
        if f"{day}.{month}.{year}" in day_keys:
            week_lectures[group][date].append(Lecture("1", lecture_info, str(hour), str(minute), str(hour), str(minute)))
        else:
            week_lectures[group] = parser.parseWeek(start.day, start.month, start.year, end.day, end.month, end.year, group)
            week_lectures[group][date].append(Lecture("1", lecture_info, str(hour), str(minute), str(hour), str(minute)))
    else:
        week_lectures[group] = parser.parseWeek(start.day, start.month, start.year, end.day, end.month, end.year, group)
        week_lectures[group][date].append(Lecture("1", lecture_info, str(hour), str(minute), str(hour), str(minute)))
    notify_lectures[group] = week_lectures[group][date][1:]
    await message.answer(f'‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã\n\nüìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {line}\n‚è∞ –í—Ä–µ–º—è: {hour}:{minute} - {hour}:{minute}\n\n–ü–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ', reply_markup=admin_settings_buttons)
    await state.finish()

@dp.message_handler(state=AdminSettings.CreateLecture_Time)
async def create_lecture_time_process(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    group = db.get_group(user_id)

    hour, minute = message.text.split(':')

    info = await state.get_data()
    lecture_info = info.get('arr')

    arr_information = []
    for description in lecture_info:
        arr_information.append(f'{description[0]} {description[1]}')
    line = ', '.join(arr_information)

    current_time = datetime_now()
    day, month, year = formatDate(current_time)
    date = f"{day}.{month}.{year}"
    weekday_number = current_time.weekday()
    start = current_time - timedelta(days=weekday_number)
    end = current_time + timedelta(days=6 - weekday_number)
    weekday = formatWeekday(current_time.weekday())
    parsed_week = {}
    keys = list(week_lectures.keys())
    if group in keys:
        day_keys = list(week_lectures[group].keys())
        if f"{day}.{month}.{year}" in day_keys:
            week_lectures[group][date].append(Lecture("1", lecture_info, str(hour), str(minute), str(hour), str(minute)))
        else:
            week_lectures[group] = parser.parseWeek(start.day, start.month, start.year, end.day, end.month, end.year, group)
            week_lectures[group][date].append(Lecture("1", lecture_info, str(hour), str(minute), str(hour), str(minute)))
    else:
        week_lectures[group] = parser.parseWeek(start.day, start.month, start.year, end.day, end.month, end.year, group)
        week_lectures[group][date].append(Lecture("1", lecture_info, str(hour), str(minute), str(hour), str(minute)))
    notify_lectures[group] = week_lectures[group][date][1:]
    await message.answer(f'‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã\n\nüìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {line}\n‚è∞ –í—Ä–µ–º—è: {hour}:{minute} - {hour}:{minute}\n\n–ü–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ', reply_markup=admin_settings_buttons)
    await state.finish()

@dp.message_handler(text='–°–≤–æ–¥–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º', state=AdminSettings.SettingsMenu)
async def groups_info(message: types.Message):
    users = db.read_all()
    groups_list = groups.get_groups()
    strokes = ''
    if len(users) > 0:
        for group in groups_list:
            group_name = escapeMarkdown(group[0])
            users_in_group = ''
            count = 0
            for user in users:
                if user[2] == group[0]:
                    notify_status = '‚ùå'
                    if user[3] == 1:
                        notify_status = '‚úÖ'
                    count += 1
                    users_in_group += f'\- {user[1]} {notify_status}\n'
            strokes += f'üë• –ì—Ä—É–ø–ø–∞ *{group_name}* \[{count}\]\:\n{users_in_group}\n'
        await message.answer(f'–°–≤–æ–¥–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º\:\n\n{strokes}\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\: {len(users)}', parse_mode="MarkdownV2")
    else:
        await message.answer('–í –ë–î –ø—É—Å—Ç–æ ü´§')

@dp.message_handler(text='–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', state=AdminSettings.SettingsMenu)
async def change_user_group(message: types.Message):
    await message.answer('–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥:\n\n'
                         '/notify - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n'
                         '/notify_myself - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–±–µ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞\n'
                         '/send_to_igor - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–≥–æ—Ä—é\n'
                         '/update_lectures - –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—ã\n'
                         '/parse_api - –ó–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∞–ø–∏\n'
                         '/clear_state - –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n'
                         '/text_add_link - –Ø —Ö–∑ —Ç–∞–º —á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å—Å—ã–ª–∫–∏ –∫–∞–∫–∏–µ—Ç–∞\n'
                         '/get_username - –ü–æ–ª—É—á–∏—Ç—å –Ω–∏–∫ –ø–æ –∏–¥\n')