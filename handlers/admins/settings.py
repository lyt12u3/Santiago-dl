import re

from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards import admin_settings_buttons, menu_buttons, delete_group_buttons, users_list_buttons
from loader import dp, db, groups, bot
from states import AdminSettings
from utils import parser
from utils.updater import update_lectures_process
from utils.utilities import formatDate, datetime_now, escapeMarkdown


@dp.message_handler(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', state=AdminSettings.SettingsMenu)
async def back(message: types.Message, state: FSMContext):
    await state.finish()
    day, month, year = formatDate(datetime_now())
    await message.answer(f'üìÜ –î–∞—Ç–∞: {day}.{month}.{year}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=menu_buttons(message.from_user.id))

@dp.message_handler(text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ', state=AdminSettings.SettingsMenu)
async def update_lectures(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä üîÑÔ∏è', reply_markup=admin_settings_buttons)
    await update_lectures_process()
    await message.answer('–ü–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ', reply_markup=admin_settings_buttons)

@dp.message_handler(text='–û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –≤—Å–µ—Ö –≥—Ä—É–ø–ø', state=AdminSettings.SettingsMenu)
async def update_lectures(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø üîÑÔ∏è', reply_markup=admin_settings_buttons)
    parser.parseGroup()
    await message.answer('–ì—Ä—É–ø–ø—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ', reply_markup=admin_settings_buttons)

@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É', state=AdminSettings.SettingsMenu)
async def delete_group_from_db(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', reply_markup=delete_group_buttons())
    await AdminSettings.DeleteGroup.set()

@dp.callback_query_handler(text="delete_group_cancel", state=AdminSettings.DeleteGroup)
async def process_delete_group_cancel(callback: types.CallbackQuery):
    await AdminSettings.SettingsMenu.set()
    return await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
@dp.callback_query_handler(lambda call: call.data not in groups.get_groups_names(), state=AdminSettings.DeleteGroup)
async def process_delete_group_invalid(callback: types.CallbackQuery):
    return await callback.message.answer("–û–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è ü´§\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö")
@dp.callback_query_handler(state=AdminSettings.DeleteGroup)
async def process_delete_group(callback: types.CallbackQuery):
     group = callback.data
     groups.delete_group(group)
     await callback.message.answer(f"–í—ã —É–¥–∞–ª–∏–ª–∏ –≥—Ä—É–ø–ø—É *{group}*", parse_mode="Markdown")
     await AdminSettings.SettingsMenu.set()

@dp.message_handler(text='–í—ã–≤–µ—Å—Ç–∏ –ë–î', state=AdminSettings.SettingsMenu)
async def show_db(message: types.Message):
    result = db.read_all()
    strokes = ''
    if len(result) > 0:
        for el in result:
            notify_status = '‚ùå'
            if el[3] == 1:
                notify_status = '‚úÖ'
            username = ''
            try:
                user = await bot.get_chat(el[1])
                username = '@' + user.username
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –æ—Ç {el[1]}: {e}")
            strokes += f'{el[1]} {el[2]} {notify_status} {username}\n'
        await message.answer(f'–î–∞–Ω–Ω—ã–µ –ë–î:\n\n{strokes}\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(result)}')
    else:
        await message.answer('–í –ë–î –ø—É—Å—Ç–æ ü´§')

@dp.message_handler(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', state=AdminSettings.SettingsMenu)
async def change_notify_status(message: types.Message):
    result = db.read_all()
    if len(result) > 0:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users_list_buttons(result))
        await AdminSettings.ChangeNotify.set()
    else:
        await message.answer('–í –ë–î –ø—É—Å—Ç–æ ü´§')

@dp.message_handler(lambda message: not re.match(r'(\d+).*', message.text), state=AdminSettings.ChangeNotify)
async def change_notify_status_user_invalid(message: types.Message):
    await message.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

@dp.message_handler(state=AdminSettings.ChangeNotify)
async def change_notify_status_user(message: types.Message):
    await AdminSettings.SettingsMenu.set()
    user_id = re.search(r'(\d+).*', message.text).group(1)
    result = db.get_notify_status(user_id)
    if result == 1:
        db.update_notify_status(user_id, False)
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –û—Ç–∫–ª—é—á–µ–Ω–æ ‚ùå', reply_markup=admin_settings_buttons)
    else:
        db.update_notify_status(user_id, True)
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –í–∫–ª—é—á–µ–Ω–æ ‚úÖ', reply_markup=admin_settings_buttons)

@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', state=AdminSettings.SettingsMenu)
async def change_notify_status(message: types.Message):
    result = db.read_all()
    if len(result) > 0:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users_list_buttons(result))
        await AdminSettings.DeleteUser.set()
    else:
        await message.answer('–í –ë–î –ø—É—Å—Ç–æ ü´§')

@dp.message_handler(lambda message: not re.match(r'(\d+).*', message.text), state=AdminSettings.DeleteUser)
async def process_delete_user_invalid(message: types.Message):
    await message.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

@dp.message_handler(state=AdminSettings.DeleteUser)
async def process_delete_user(message: types.Message):
    await AdminSettings.SettingsMenu.set()
    user_id = re.search(r'(\d+).*', message.text).group(1)
    if (not db.user_exists(user_id)):
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ", reply_markup=admin_settings_buttons)
        return
    db.delete_user(user_id)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —É–¥–∞–ª–µ–Ω", reply_markup=admin_settings_buttons)

@dp.message_handler(text='–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', state=AdminSettings.SettingsMenu)
async def change_user_group(message: types.Message):
    await message.answer('–ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')

@dp.message_handler(text='–°–≤–æ–¥–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º', state=AdminSettings.SettingsMenu)
async def groups_info(message: types.Message):
    users = db.read_all()
    groups_list = groups.get_groups()
    strokes = ''
    if len(users) > 0:
        for group in groups_list:
            group_name = escapeMarkdown(group[0])
            users_in_group = ''
            count = 0
            for user in users:
                if user[2] == group[0]:
                    notify_status = '‚ùå'
                    if user[3] == 1:
                        notify_status = '‚úÖ'
                    count += 1
                    users_in_group += f'\- {user[1]} {notify_status}\n'
            strokes += f'üë• –ì—Ä—É–ø–ø–∞ *{group_name}* \[{count}\]\:\n{users_in_group}\n'
        await message.answer(f'–°–≤–æ–¥–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º\:\n\n{strokes}\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\: {len(users)}', parse_mode="MarkdownV2")
    else:
        await message.answer('–í –ë–î –ø—É—Å—Ç–æ ü´§')

@dp.message_handler(text='–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', state=AdminSettings.SettingsMenu)
async def change_user_group(message: types.Message):
    await message.answer('–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥:\n\n/notify - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n/notify_myself - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–±–µ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞\n/send_to_igor - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–≥–æ—Ä—é\n/create_lecture - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞—Ä—É (–û–ø–∞—Å–Ω–æ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –±–æ—Ç–µ)\n/update_lectures - –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—ã\n/parse_api - –ó–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∞–ø–∏\n/clear_state - –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n/text_add_link - –Ø —Ö–∑ —Ç–∞–º —á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å—Å—ã–ª–∫–∏ –∫–∞–∫–∏–µ—Ç–∞\n/get_username - –ü–æ–ª—É—á–∏—Ç—å –Ω–∏–∫ –ø–æ –∏–¥\n/notify_test - –¢–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n/notify_test_delete - –û—á–∏—Å—Ç–∏—Ç—å –±–¥ –Ω–∞ —Å–µ–±—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏')

# @dp.message_handler(text='–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', state=MenuState.Admin_SettingsMenu)
# async def change_user_group(message: types.Message):
#     result = db.read_all()
#     markup = ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
#     if len(result) > 0:
#         for el in result:
#             notify_status = '‚ùå'
#             if el[3] == 1:
#                 notify_status = '‚úÖ'
#             markup.add(f'{el[1]} | {el[2]} | {notify_status}')
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=markup)
#         await MenuState.Admin_ChangeGroup_Step1.set()
#     else:
#         await message.answer('–í –ë–î –ø—É—Å—Ç–æ ü´§')
#
# @dp.message_handler(lambda message: not re.match(r'(\d+).*', message.text), state=MenuState.Admin_ChangeGroup_Step1)
# async def process_change_user_group_invalid(message: types.Message):
#     await message.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
#
# @dp.message_handler(state=MenuState.Admin_ChangeGroup_Step1)
# async def process_delete_user(message: types.Message, state: FSMContext):
#     # user_id = message.text.replace("ID: ", '')
#     user_id = re.search(r'(\d+).*', message.text).group(1)
#     await state.update_data(id = user_id)
#     markup = ReplyKeyboardMarkup(resize_keyboard=True)
#     markup.add('–ö–ù–¢-22-4').add('–í–ü–í–ü–°-22-3').add('–Ü–¢–£-22-1')
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É", reply_markup=markup)
#     await MenuState.Admin_ChangeGroup_Step2.set()
#
# @dp.message_handler(lambda message: message.text not in ["–ö–ù–¢-22-4", "–í–ü–í–ü–°-22-3", "–Ü–¢–£-22-1"], state=MenuState.Admin_ChangeGroup_Step2)
# async def process_gender_invalid(message: types.Message):
#     return await message.reply("–£–∫–∞–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ü´§\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
#
# @dp.message_handler(state=MenuState.Admin_ChangeGroup_Step2)
# async def process_nure_group(message: types.Message, state: FSMContext):
#     data = await state.get_data()
#     group = message.text
#     db.update_nure_group(data['id'], group)
#     await MenuState.Admin_SettingsMenu.set()
#     await message.answer(f'–ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data["id"]} –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {group}', reply_markup=admin_settings_markup)
#     # db.update_nure_group()
#     # await message.answer('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!')
#     # day, month, year = formatDate(datetime.now())
#     # await message.answer(f'üìÜ –î–∞—Ç–∞: {day}.{month}.{year}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=menu_buttons(message.from_user.id))